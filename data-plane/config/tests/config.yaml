---
#
# Scenario -
#
#  1) Accept private and localhost traffic without any max connections per IP restrictions
#  2) Restrict max connections from non-private non-localhost traffic from NAFTA countries to 5 per IP
#  3) Immediately and rudely close all other connections.
#  4) Restrict max connections from all sources except loopback to 32768
#  5) Restrict requests per second for all connections missing client TLS certs to 1 per second.
#  6) ...
#

version: 0.1.0
globals:
  io_buffer_size_bytes: 32768
  idle_timeout_millis: 30000
  require_sanitization: 1     # If non-zero, only sanitized fields can be used as keys for limits, routing, etc.
entities:
  #
  # TLS Contexts
  #
  # Example TLS server context
  - id: ec23c29b-605e-4b0b-8bae-a4c4692e6164
    type: TLS_CTX
    materials:
      key:
        path: "/foo/bar/baz.key"
      certificate:
        path: "/foo/bar/baz.crt"
      ca:
        paths: [ "/foo/bar/ca.crt" ]
    options:
      # Valid peer_verification values are VERIFY_NONE, VERIFY_ALWAYS, VERIFY_IF_CERT.  VERIFY_IF_CERT can be used to give lesser privileges to anonymous clients
      peer_verification: VERIFY_NONE
  # Example TLS client context
  - id: 518aa91c-1b06-4364-a0bd-850a04563fa9
    type: TLS_CTX
    materials:
      ca:
        path: "/foo/bar/ca.key"
    options:
      peer_verification: VERIFY_ALWAYS
      certificate_chain_depth: 42
  # Example mTLS client or server context
  - id: cdad51ab-9f54-4b9a-bbb5-38568f978019
    type: TLS_CTX
    materials:
      key:
        path: "/foo/bar/baz.key"
      certificate:
        path: "/foo/bar/baz.crt"
      ca:
        path: "/foo/bar/ca.crt"
    options:
      peer_verification: VERIFY_ALWAYS
      certificate_chain_depth: 42
  #
  # TLS Indices
  #
  # Server TLS context index
  - id: 81607fb3-7453-4372-995a-5e1f1317fd23
    type: TLS_IDX
    # The default server context is used if the peer does not use SNI
    default_context: ec23c29b-605e-4b0b-8bae-a4c4692e6164
    # Additional certs are indexed by their SANs.  The cert with the SAN that matches the SNI most-specifically
    # will be used.
    contexts:
      - cdad51ab-9f54-4b9a-bbb5-38568f978019
  # Client TLS context index
  - id: 0d50e7dd-2e76-4d3e-b401-2826265893a8
    type: TLS_IDX
    # The default client context is use if the value of the Host: header doesn't any indexed certificates.
    default_context: 518aa91c-1b06-4364-a0bd-850a04563fa9
    # Additional certs are indexed by their SANs.  The cert that best matches the Host: header will be used, unless
    # no certificates match in which case the default_context will be used.
    contexts:
      - cdad51ab-9f54-4b9a-bbb5-38568f978019
  #
  # Security Rules
  #
  - id: e46160d1-6489-4ee9-b1c6-98ac27a00d30
    type: SEC_RULE
    ruleset: TODO_PATH_RULES
  - id: 2524fbb2-e48a-4c33-80f6-99560ed20f71
    type: SEC_RULE
    ruleset: TODO_HOST_HEADER_RULES
  - id: 7db999e7-2601-46d5-b9e0-07a66248d382
    type: SEC_RULE
    ruleset: TODO_AUTHORIZATION_BEARER_HEADER_RULES
  #
  # Limits
  #
  - id: 32c6289a-0a2f-4233-b4cc-b7c2be04731f
    type: MAX_LIMIT
    key: IP_ADDRESS
    limit: 5
  - id: 934dcdef-bbb3-4b03-b9de-1b806489e89a
    type: MAX_LIMIT
    key: NONE
    limit: 32768
  - id: 9d6c3542-8d4e-48e4-a205-6f15488c1fc1
    type: RATE_LIMIT
    key: IP_ADDRESS
    limit: 42
    time: { value: 100, unit: MILLISECOND }
  # TOP_N filters can protect against cases where one client consumes a grossly disproportionate share of the traffic.
  # They work best when there are many distinct and active clients, otherwise they produce more false positives.
  - id: a29722de-295e-4384-a798-238f877f3894
    type: TOP_N_LIMIT
    key: STRING
    # Only the top N keys will be tracked.  On insert, if no open slot, decrement all current keys and evict all 0s.
    n: 42
    # keys that exceed this threshold are NON_CONFORMING, otherwise they are CONFORMING.
    threshold: 10000
  #
  # Clusters
  #
  - id: f6033542-400c-48f7-9d9f-d86d470aad08
    type: CLUSTER
    connection:
      type: TLS
      context_index: 0d50e7dd-2e76-4d3e-b401-2826265893a8
      idle_timeout_millis: 30000
      outbound_connection_dag: 57570ae6-ee13-47db-9359-beed35d77609
    endpoints:
      # valid types: IP4, IP6, CIDR4, CIDR6, FQDN, FQDN_RANGE, IP4_RANGE, IP6_RANGE, and ENDPOINT_LOAD
      - type: CIDR4
        values: [ 192.168.22.0/24, 192.168.24.0/24 ]
        port: 443
      # Range syntax is described in https://github.com/eam/libcrange.  FQDNs are cached according to the record's TTL.
      - type: IP4_RANGE
        values: [ 209.131.40.1-209.131.40.255 ]
        port: 8443
  - id: 8d441d8d-245b-44dd-b0aa-997bc9f745ff
    type: CLUSTER
    connection:
      type: TCP
      idle_timeout_millis: 30000
      outbound_connection_dag: 57570ae6-ee13-47db-9359-beed35d77609
    endpoints:
      # Current loads can also be specified, CIDRs and RANGEs cannot be used since load varies by endpoint.  This
      # is intended for dynamic updates from a control plane, not static config files.
      # Clusters that are entirely comprised of endpoints with loads support LEAST_LOADED iteration.  Otherwise only
      # ROUND_ROBIN iteration may be used.
      - type: ENDPOINT_LOAD
        values:
          - { ip4: 192.168.23.10, port:8080, requests: 42 }
          - { ip4: 192.168.23.11, port:8080, requests: 2 }
          - { ip4: 192.168.23.12, port:8080, requests: 34 }
          - { fqdn: foo.example.com, port:8080, requests: 23 }
          - { fqdn: bar.example.com, port:8080, requests: 24 }
  - id: e41e0303-6f68-485a-ba83-b4bad887ca8c
    type: CLUSTER
    connection:
      type: TCP
      idle_timeout_millis: 30000
      connection_filter: 57570ae6-ee13-47db-9359-beed35d77609
    endpoints:
      - type: ENDPOINT_LOAD
        values:
          - { ip4: 192.168.23.45, port:8080, requests: 10 }
          - { ip4: 192.168.23.46, port:8080, requests: 22 }
          - { ip4: 192.168.23.47, port:8080, requests: 32 }
  #
  # Ports
  #
  - id: c542e5a9-4812-4d3d-a09a-6f7e2428a08e
    type: TLS_PORT
    addresses:
      - { ip4:0.0.0.0, port:443 }
    listen_backlog: 123
    context_index: 81607fb3-7453-4372-995a-5e1f1317fd23
    inbound_connection_dag: a1f5a2ec-ebe4-40a8-8346-403a0b1d10ee
  #
  # Inbound Connection Filters
  #
  - id: a1f5a2ec-ebe4-40a8-8346-403a0b1d10ee
    type: INBOUND_CONNECTION_CIDR_MAP
    entity: INBOUND_CONNECTION  # implicit
    attribute: PEER_ADDRESS
    component: IP_ADDRESS
    # Map of CIDRs to rules
    rule_map:
      # Outer keys are looked up sub-linearly
      10.0.0.0/8:
        # All condition/action pairs are evaluated linearly.  An action without a condition is always executed.
        - actions:
            # Multiple actions can be applied (in order), but the first transition: stops the iteration
            - transition: 0f42a1d1-cb6e-4a7b-be44-35fe34c6d5e1
      172.16.0.0/12:
        - actions: [ { transition: 0f42a1d1-cb6e-4a7b-be44-35fe34c6d5e1 } ]
      192.168.0.0/16:
        - actions: [ { transition: 0f42a1d1-cb6e-4a7b-be44-35fe34c6d5e1 } ]
      127.0.0.0/8:
        - actions: [ { transition: 0f42a1d1-cb6e-4a7b-be44-35fe34c6d5e1 } ]
    # Default rules are invoked if no prior actions in the rule_map make a transition.
    default_rules:
      - conditions:
          - entity: INBOUND_CONNECTION
            attribute: PEER_ADDRESS
            component: IP_ADDRESS
            type: GEO_COUNTRY
            values: [ US, MX, CA ]  # List will be searched linearly.  If any match the condition is true.
        actions:
          # Actions are taken only if one of the conditions evaluates true.
          - transition: 9dc45f24-3d80-499a-b7a2-9bac323938d6
      - actions:
          - transition: 891ab9b1-2e4e-4357-9455-c199bc40d777
  - id: 9d6c3542-8d4e-48e4-a205-6f15488c1fc1
    type: INBOUND_CONNECTION_RULE_LIST
    # List of rules.  Rules are evaluated in order until a transition breaks the iteration or the end of the list
    # is reached.
    rules:
      - conditions:
          # Enforce a per-IPv4 address max connections (multitenancy fairness, sorry NATs)
          - type: ACQUIRE_SLOT
            entity: INBOUND_CONNECTION
            attribute: PEER_ADDRESS
            component: IP_ADDRESS # The IP address will be used as the key for the rate limit
            limit: 32c6289a-0a2f-4233-b4cc-b7c2be04731f
            slots: 1 # Every connection accepted counts as 1 slot against the limit's available slots
            values: [ CONFORMING ]
        actions:
          - mark: HAS_PER_IP_CONNECTION_SLOT
          # Transitioning to another filter stops the iteration.
          - transition: 0f42a1d1-cb6e-4a7b-be44-35fe34c6d5e1
      - actions:
          - transition: 891ab9b1-2e4e-4357-9455-c199bc40d777
  - id: 0f42a1d1-cb6e-4a7b-be44-35fe34c6d5e1
    type: INBOUND_CONNECTION_RULE_LIST
    rules:
      # All rules are evaluated in the order they are defined here
      - conditions:
          - type: PROPERTY
            entity: INBOUND_CONNECTION
            attribute: PEER_CERTIFICATE
            operator: NOT_EXIST
        actions:
          # We can't rate limit requests here since we're in the inbound connection filter chain, but we can save
          # a mark that can be used later in the inbound request filter chain.
          - mark: ANONYMOUS
      # Enforce a global cap on inbound connections regardless of source
      - conditions:
          - type: ACQUIRE_SLOT
            entity: INBOUND_CONNECTION  # No key will be used for the rate limit, it's just a max count
            limit: 934dcdef-bbb3-4b03-b9de-1b806489e89a
            slots: 1  # The default.  A H2 listener could set a higher value since it may carry more traffic.
            values: [ CONFORMING ]
        actions:
          - mark: HAS_GLOBAL_CONNECTION_SLOT
          - transition: d573352b-0513-4b11-b8e5-4585ced52369
      - actions:
          - transition: 891ab9b1-2e4e-4357-9455-c199bc40d777
  # Arbitrary extern "C" extensions can also be incorporated
  - id: d573352b-0513-4b11-b8e5-4585ced52369
    type: INBOUND_CONNECTION_EXTENSION
    path: /opt/lib/libfoo.so
    api: 1.1 # Mandatory field.  Config will be rejected if it doesn't support the extension API version.
    # Config is pass through to the extension
    config:
      foo: qux
      bar: quux
    # List of rules to execute after the extension returns and can take different actions based on its return codes.
    rules:
      - conditions:
          - NOT:
              type: RESULT
              values: [ 0 ]
        actions:
          - transition: 891ab9b1-2e4e-4357-9455-c199bc40d777 # Close connection
      - actions:
          - transition: ad9ffc27-f71f-43ae-8cfe-90583f79266d
  # This enacts request processing on a connection
  - id: ad9ffc27-f71f-43ae-8cfe-90583f79266d
    type: INBOUND_CONNECTION_REQUEST
    inbound_request_dag: 2c9463aa-daff-4370-9f24-40c900c85160
    cleanup: ccc0d16e-4d6b-4e0e-a5c7-7e1c0bc8d627
  # This will always be called, whether invoked by this config or after the proxy closes the connection
  - id: 891ab9b1-2e4e-4357-9455-c199bc40d777
    type: INBOUND_CONNECTION_CLOSE
    cleanup: ccc0d16e-4d6b-4e0e-a5c7-7e1c0bc8d627
  - id: ccc0d16e-4d6b-4e0e-a5c7-7e1c0bc8d627
    type: INBOUND_CONNECTION_CLEANUP
    rules:
      - conditions:
          - type: MARK
            values: [ HAS_GLOBAL_CONNECTION_SLOT ]
        actions:
          # The key and slots must match the rule that set the mark
          - type: RELEASE_SLOT
            entity: INBOUND_CONNECTION
            limit: 934dcdef-bbb3-4b03-b9de-1b806489e89a
            slots: 1
      - conditions:
          - type: MARK
            values: [ HAS_PER_IP_CONNECTION_SLOT ]
        actions:
          # The key and slots must match the rule that set the mark
          - type: RELEASE_SLOT
            entity: INBOUND_CONNECTION
            attribute: PEER_ADDRESS
            component: IPV4_ADDRESS
            limit: 32c6289a-0a2f-4233-b4cc-b7c2be04731f
            slots: 1
      - actions:
          - type: MEASURE
            TODO: todo
          - type: LOG
            TODO: todo
  #
  # Inbound HTTP Request Filters
  #
  - id: 2c9463aa-daff-4370-9f24-40c900c85160
    type: INBOUND_REQUEST_RULE_LIST
    # List of rules
    rules:
      # WAF: Send a 400 Bad Request response if the request looks suspicious
      - conditions:
          - type: WAF
            entity: INBOUND_REQUEST
            attribute: URI
            security_rules: e46160d1-6489-4ee9-b1c6-98ac27a00d30
            # Condition evaluates to true if the WAF has a anomaly score greater than or equal to 30
            anomaly_threshold: 30
          - type: WAF
            entity: INBOUND_REQUEST
            attribute: HEADERS
            # If component is omitted, all headers would be inspected
            component: host
            security_rules: 2524fbb2-e48a-4c33-80f6-99560ed20f71
            anomaly_threshold: 30
          - type: WAF
            entity: INBOUND_REQUEST
            attribute: HEADERS
            component: authorization
            security_rules: 7db999e7-2601-46d5-b9e0-07a66248d382
            anomaly_threshold: 30
        actions:
          - transition: 4640c726-9d4a-426d-870d-121aacd2acb5
      # Otherwise normalize the path and host header since we use them for routing
      - actions:
          # Use an aggressively sanitized path for routing, but forward a more conservatively sanitized path
          - type: CREATE
            entity: INBOUND_REQUEST
            attribute: ANNOTATIONS
            component: SAFE_PATH
            value:
              tupe: SANITIZE
              entity: INBOUND_REQUEST
              attribute: URI
              component: PATH
              transforms: [ RECURSIVE_DECODE, MERGE_SLASHES, RESOLVE_DOTS ]
          - type: UPDATE
            entity: INBOUND_REQUEST
            attribute: URI
            component: PATH
            value:
              type: SANITIZE
              entity: INBOUND_REQUEST
              attribute: URI
              component: PATH
              transforms: [ NON_NESTED_DECODE, DECODE_SLASHES, MERGE_SLASHES, RESOLVE_DOTS ]
          # Use only the first host header, dropping any extra ones, and canonicalize the first
          - type: UPDATE
            entity: INBOUND_REQUEST
            attribute: HEADERS
            component: host
            value:
              type: SANITIZE
              entity: INBOUND_REQUEST
              attribute: HEADERS
              component: host
              transforms: [ DROP_EXTRA_HEADERS, CANONICALIZE_HOSTPORT ]
          - type: UPDATE
            entity: INBOUND_REQUEST
            attribute: HEADERS
            component: authorization
            value:
              type: SANITIZE
              entity: INBOUND_REQUEST
              attribute: HEADERS
              component: authorization
              transforms: [ DROP_EXTRA_HEADERS, CANONICALIZE_BEARER_TOKEN ]
      # Send a 401 Unauthorized if the connection doesn't have a client cert and the path is sensitive
      - conditions:
          - AND:
              - type: PROPERTY
                entity: INBOUND_REQUEST
                attribute: URI
                component: PATH
                operator: PREFIX
                values: [ /admin/, /account/ ]
              - type: MARK
                entity: INBOUND_CONNECTION
                values: [ ANONYMOUS ]
        actions:
          - transition: 0f05cd43-7861-4373-903c-8822d83dad5c
      - actions:
          - transition: df5ce3b2-ead9-4a2e-965c-a26d5f7557c6
      # Track all distinct bearer tokens and if any exceed a threshold that is considered abusive, reject with 429.
      # Using the sanitized authorization header prevents trivial bypasses due to extra whitespace, etc.
      - conditions:
          - type: ACQUIRE_SLOT
            entity: INBOUND_REQUEST
            attribute: HEADERS
            component: authorization
            limit: a29722de-295e-4384-a798-238f877f3894
            slots: 1
            values: [ NON_CONFORMING ]
        actions:
          # Reject with 429 Too Many Requests
          - transition: 31db01c6-f83d-4403-b921-12bd57d9f0de
  # Use the sanitized path for routing to clusters
  - id: df5ce3b2-ead9-4a2e-965c-a26d5f7557c6
    type: INBOUND_REQUEST_PATH_WILDCARD_MAP
    attribute: ANNOTATIONS
    component: SAFE_PATH
    # Map of paths to rules
    rule_map:
      # Rules are matched sub-linearly and the most specific match is preferred
      /foo/bar/baz/*:
        # Additional conditions can be added here, but the list for a path will be evaluated linearly
        - actions:
            - transition: 71d899e5-e339-4549-b9cd-d63f2eeadf50
      /foo/bar/*: [ { actions: [ { transition: 71d899e5-e339-4549-b9cd-d63f2eeadf50 } ] } ]
      /admin/*: [ { actions: [ { transition: 71d899e5-e339-4549-b9cd-d63f2eeadf50 } ] } ]
      /account/*: [ { actions: [ { transition: 71d899e5-e339-4549-b9cd-d63f2eeadf50 } ] } ]
    # If no path match, transition to header match
    default_rules: [ { actions: [ { transition: 4e3bdda9-34f6-442a-9ff1-d76d21d2d68e } ] } ]
  # Use the sanitized host header for routing to clusters if no paths match
  - id: 4e3bdda9-34f6-442a-9ff1-d76d21d2d68e
    type: INBOUND_REQUEST_FQDN_WILDCARD_MAP
    attribute: HEADERS
    component: host
    # Map of header wildcards to rules
    rule_map:
      # FQDN_WILDCARD_MAP automatically ignores any :<port> that may be present in the key
      *.example.com: [ { actions: [ { transition: 71d899e5-e339-4549-b9cd-d63f2eeadf50 } ] } ]
    # If no wildcard patterns match the host header, transition to a filter tha sends a 404 Not Found
    default_rules: [ { actions: [ { transition: 0f05cd43-7861-4373-903c-8822d83dad5c } ] } ]
  - id: 71d899e5-e339-4549-b9cd-d63f2eeadf50
    type: LOAD_BALANCER
    entity: INBOUND_REQUEST
    clusters:
      # Requests are distributed across clusters in a weighted round robin fashion such that the probability that a
      # request is sent to a cluster is <cluster weight> / <sum all cluster weights>.  Within a CLUSTER load
      # balancing can be LEAST_LOADED, but across CLUSTERS only weighted round robin is supported.
      - { id: e41e0303-6f68-485a-ba83-b4bad887ca8c, weight: 3 }
      # A special weight value of SIZE is automatically resolved to the number of members in the cluster (the
      # transitive closure).   This weight is automatically adjusted as clusters shrink and grown.  If no weight
      # is specified, the weight defaults to SIZE.
      - { id: 8d441d8d-245b-44dd-b0aa-997bc9f745ff, weight: SIZE }
    iteration:
      # Iteration rules are evaluated for each endpoint while iterating through the endpoint list, either in
      # ROUND_ROBIN or in LEAST_LOADED order.  For LEAST_LOADED order, all endpoints in the cluster must have their
      # current loads defined, probably by an external control plane.   Transitioning to an outbound_filter
      # finishes the iteration.
      order: LEAST_LOADED
      rules:
        - conditions:
            # Conditions allow additional dimensions to be considered in addition to current load.  Per-destination
            # throttles, for instance, can reduce the size of oscillations due to the thundering herd problem where
            # all requests clobber the least loaded endpoint before the control plane can update that endpoint's
            # current load.
            - type: ACQUIRE_SLOT
              entity: ENDPOINT
              attribute: PEER_ADDRESS
              component: IP_ADDRESS   # The IPv4 address will be used as the key for the rate limit
              limit: 9d6c3542-8d4e-48e4-a205-6f15488c1fc1
              slots: 1   # This is 1 increment per HTTP request since we're in the inbound request filter dag.
              values: [ CONFORMING ]
          actions:
            # Mark the request so we can release the slot later
            - mark: 9d6c3542-8d4e-48e4-a205-6f15488c1fc1
            # Transition to an outbound filter (i.e., select this endpoint)
            - outbound_connection_dag: 57570ae6-ee13-47db-9359-beed35d77609
      # invoked if the iteration ends (loops around at most once) without a transition
      default_rules:
        # Spill traffic over to a different load balancer
        - actions:
            - transition: fba4f5de-e8ba-4d3d-8fad-942c38991167
  - id: fba4f5de-e8ba-4d3d-8fad-942c38991167
    type: INBOUND_REQUEST_LOAD_BALANCER
    clusters:
      - { id: f6033542-400c-48f7-9d9f-d86d470aad08, weight: 3 }
    iteration:
      # At least one of the clusters does not have ENDPOINT_LOADs so only ROUND_ROBIN is supported
      order: ROUND_ROBIN
      rules:
        - conditions:
            # Conditions allow additional dimensions to be considered in addition to current load.  Per-destination
            # throttles, for instance, can reduce the size of oscillations due to the thundering herd problem where
            # all requests clobber the least loaded endpoint before the control plane can update that endpoint's
            # current load.
            - type: ACQUIRE_SLOT
              entity: ENDPOINT
              attribute: PEER_ADDRESS
              component: IP_ADDRESS   # The IPv4 address will be used as the key for the rate limit
              limit: 9d6c3542-8d4e-48e4-a205-6f15488c1fc1
              slots: 1   # This is 1 increment per HTTP request since we're in the inbound request filter dag.
              values: [ CONFORMING ]
          actions:
            # Mark the request so we can release the slot later
            - mark: 9d6c3542-8d4e-48e4-a205-6f15488c1fc1
            # Transition to an outbound filter (i.e., select this endpoint)
            - outbound_connection_dag: 57570ae6-ee13-47db-9359-beed35d77609
      # invoked if the iteration ends (loops around at most once) without a transition
      default_rules:
        # Traffic cannot be spilled over, so reject it with 429 Too Many Requests instead
        - actions: [ { transition: 31db01c6-f83d-4403-b921-12bd57d9f0de } ]
  - id: 4866b125-c344-44f9-a52e-559a2ccc63fa
    type: INBOUND_REQUEST_CLOSE
    rules:
      - actions: [ { transition: 370c24fb-6f05-4a7b-b545-ec3bc891eca4 } ]
  - id: 0f05cd43-7861-4373-903c-8822d83dad5c
    type: INBOUND_REQUEST_RESPONSE
    status_code: 404
    description: Not Found
    rules:
      - actions: [ { transition: 370c24fb-6f05-4a7b-b545-ec3bc891eca4 } ]
  - id: 0f05cd43-7861-4373-903c-8822d83dad5c
    type: INBOUND_REQUEST_RESPONSE
    status_code: 401
    description: Unauthorized
    rules:
      - actions: [ { transition: 370c24fb-6f05-4a7b-b545-ec3bc891eca4 } ]
  - id: 31db01c6-f83d-4403-b921-12bd57d9f0de
    type: INBOUND_REQUEST_RESPONSE
    status_code: 429
    description: Too Many Requests
    rules:
      - actions: [ { transition: 370c24fb-6f05-4a7b-b545-ec3bc891eca4 } ]
  - id: 4640c726-9d4a-426d-870d-121aacd2acb5
    type: INBOUND_REQUEST_RESPONSE
    status_code: 400
    description: Bad Request
    rules:
      - actions: [ { transition: 370c24fb-6f05-4a7b-b545-ec3bc891eca4 } ]
  - id: 91e51cb7-6d75-4bf9-8c7d-17876f988939
    type: INBOUND_REQUEST_RESPONSE
    status_code: 301
    description: Moved Permanently
    headers: { location: https://foo.example.com/bar/baz }
    rules:
      - actions: [ { transition: 370c24fb-6f05-4a7b-b545-ec3bc891eca4 } ]
  - id: 370c24fb-6f05-4a7b-b545-ec3bc891eca4
    type: INBOUND_REQUEST_CLEANUP
    rules:
      - conditions:
          - type: MARK
            values: [ 9d6c3542-8d4e-48e4-a205-6f15488c1fc1 ]
        actions:
          # The key and slots must match the rule that set the mark
          - type: RELEASE_SLOT
            entity: ENDPOINT
            attribute: PEER_ADDRESS
            component: IP_ADDRESS   # The IPv4 address will be used as the key for the rate limit
            limit: 9d6c3542-8d4e-48e4-a205-6f15488c1fc1
            slots: 1
  #
  # Outbound Connection Filters
  #
  - id: 57570ae6-ee13-47db-9359-beed35d77609
    type: OUTBOUND_CONNECTION_REQUEST
    outbound_request_dag: 31fce833-b6e8-4c9c-8900-189304354b5f
    cleanup: e4559690-ca02-4eab-9934-66b9d207e24e
  - id: e4559690-ca02-4eab-9934-66b9d207e24e
    type: CLEANUP
    rules: [ ]
  #
  # Outbound HTTP Request Filters
  #
  - id: 31fce833-b6e8-4c9c-8900-189304354b5f
    type: OUTBOUND_REQUEST_SEND
    outbound_response_dag: 7703231d-0f36-4577-a6f3-71d0ae14bba9
    cleanup: 2081bf5e-991b-47fe-af47-92c6d6e71764
  - id: 2081bf5e-991b-47fe-af47-92c6d6e71764
    type: CLEANUP
    entity: OUTBOUND_REQUEST
    rules: [ ]
  #
  # Outbound HTTP Response Filters
  #
  - id: 7703231d-0f36-4577-a6f3-71d0ae14bba9
    type: OUTBOUND_RESPONSE_SEND
    inbound_response_dag: f63e4f38-3130-42a3-a256-0c93aef2dbb7
    cleanup: bad06498-41e4-4c47-a4af-4d5f615a7665
  - id: bad06498-41e4-4c47-a4af-4d5f615a7665
    type: OUTBOUND_RESPONSE_CLEANUP
    rules: [ ]
  #
  # Inbound HTTP Response Filters
  #
  - id: f63e4f38-3130-42a3-a256-0c93aef2dbb7
    type: INBOUND_RESPONSE_SEND
    cleanup: 32a00db2-93a6-4657-be80-37695ce6711a
  - id: 32a00db2-93a6-4657-be80-37695ce6711a
    type: INBOUND_RESPONSE_CLEANUP
    rules: [ ]